from control import *

################################################################################################################################
## drive.script
################################################################################################################################
# external parameters (passed between the interface and the drive thread)
ur_cmd_time = 0
ur_cmd_id = 0
ur_cmd_kind = 0 
ur_cmd_target = UR_ZERO
ur_cmd_max_speed = 0
ur_cmd_max_acceleration = 0
ur_cmd_force_low_bound = UR_DEFAULT_FORCE_LOW_BOUND
ur_cmd_force_high_bound = UR_DEFAULT_FORCE_HI_BOUND
ur_cmd_contact_handling = 0

def ur_drive(time, id, kind, target, max_speed, max_acceleration, force_low_bound, force_high_bound, contact_handling):
    # the actual work is done on separate drive and motion threads, below
    ur_cmd_time = time
    ur_cmd_id = id
    ur_cmd_kind = kind 
    ur_cmd_target = target
    ur_cmd_max_speed = max_speed
    ur_cmd_max_acceleration = max_acceleration
    ur_cmd_force_low_bound = force_low_bound
    ur_cmd_force_high_bound = force_high_bound
    ur_cmd_contact_handling = contact_handling
    return 0
end



################################################################################################################################
## Motion thread 
################################################################################################################################
# internal parameters (passed between the drive thread and the the command thread)
ur_target_speed = UR_ZERO
ur_max_acc = 0

# This is the only thread allowed to call UR motion primitives (speedj)
# By calling blocking motion commands on a separate command thread, the main thread is free to check forces from the FT sensor
# and interrupt the motion if needed, by killing the command thread.    
# Note that only speedj is trully interruptible (that is, it won't cause jerky motion).
thread ur_speed_command_thread_fn():
    # Set the joint speed together with max acceleration. 
    # Attention: the call to speedj doesn't return until the speed is reached AND the time elapsed. 
    # To change the speed, kill and restart the thread. 
    # Note: a critical section is not needed, since the globals used here are only changed by the drive thread after killing this thread
    # Moreover, the speedj call needs to be the first instruction, otherwise the thread might be killed before the motion starts, 
    # leading to "infinite loop detected" errors. 
    # Adding a sync() call in the control thread would fix that, it would also make the control loop take 2 cycles instead of 1
    speedj(ur_target_speed, ur_max_acc, 0)
end

################################################################################################################################
## Control thread.
################################################################################################################################
thread ur_drive_thread_fn():    
    # run forever, checking forces and updating targets
    cmd_thread = run ur_speed_command_thread_fn()
    while True:
        kill cmd_thread
        enter_critical 
        target = ur_get_target_speed( ur_cmd_time,
                                      ur_cmd_id,
                                      ur_cmd_kind, 
                                      ur_cmd_target,
                                      ur_cmd_max_speed,
                                      ur_cmd_max_acceleration,
                                      ur_cmd_force_low_bound,
                                      ur_cmd_force_high_bound,
                                      ur_cmd_contact_handling)
        ur_target_speed = [target[0], target[1], target[2], target[3], target[4], target[5]]
        ur_max_acc = target[6]
        exit_critical
        

        # Trigger the move, by starting and then killing the move thread. The move still executes for the current time step.
        # Note that the call below suspends the current thread (killing the motion thread yields the remaining time), 
        # so this loop resumes only after 8ms
        cmd_thread = run ur_speed_command_thread_fn()
    end
end     

